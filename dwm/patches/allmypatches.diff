diff --git a/config.def.h b/config.def.h
index 1c0b587..5efc51e 100644
--- a/config.def.h
+++ b/config.def.h
@@ -72,7 +72,11 @@ static Key keys[] = {
 	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
 	{ MODKEY,                       XK_Return, zoom,           {0} },
 	{ MODKEY,                       XK_Tab,    view,           {0} },
-	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
+	{ MODKEY,                       XK_Tab,    cycleview,      {0} },
+	{ MODKEY|ShiftMask,             XK_Tab,    cycleview,      {.i = 1} },
+	{ MODKEY|ControlMask,           XK_Tab,    reorganize,     {0} },
+	{ MODKEY,                       XK_c,      killclient,     {0} },
+	{ MODKEY|ShiftMask,             XK_c,      spawn,          SHCMD("xkill -id $(xdotool getactivewindow)") },
 	{ MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
 	{ MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
 	{ MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
@@ -94,6 +98,7 @@ static Key keys[] = {
 	TAGKEYS(                        XK_8,                      7)
 	TAGKEYS(                        XK_9,                      8)
 	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+	{ MODKEY|ShiftMask,             XK_r,      restart,        {0} },
 };
 
 /* button definitions */
diff --git a/dwm.c b/dwm.c
index 4465af1..12fce66 100644
--- a/dwm.c
+++ b/dwm.c
@@ -157,6 +157,7 @@ static void configure(Client *c);
 static void configurenotify(XEvent *e);
 static void configurerequest(XEvent *e);
 static Monitor *createmon(void);
+static void cycleview(const Arg *arg);
 static void destroynotify(XEvent *e);
 static void detach(Client *c);
 static void detachstack(Client *c);
@@ -188,10 +189,12 @@ static void pop(Client *);
 static void propertynotify(XEvent *e);
 static void quit(const Arg *arg);
 static Monitor *recttomon(int x, int y, int w, int h);
+static void reorganize(const Arg *arg);
 static void resize(Client *c, int x, int y, int w, int h, int interact);
 static void resizeclient(Client *c, int x, int y, int w, int h);
 static void resizemouse(const Arg *arg);
 static void restack(Monitor *m);
+static void restart(const Arg *arg);
 static void run(void);
 static void scan(void);
 static int sendevent(Client *c, Atom proto);
@@ -644,6 +647,26 @@ createmon(void)
 	return m;
 }
 
+void
+cycleview(const Arg *arg)
+{
+	unsigned int t = selmon->tagset[selmon->seltags];
+	for (;;) {
+		Client *c;
+		if (arg->i && (t >>= 1) == 0)
+			t = (TAGMASK+1) >> 1;
+		if (!arg->i && (t <<= 1) & (TAGMASK+1))
+			t = 1 & TAGMASK;
+		for (c = selmon->clients; c; c = c->next)
+			if (ISVISIBLEONTAG(c, t))
+				goto cycleview_endfor;
+	}
+	cycleview_endfor:;
+	selmon->tagset[selmon->seltags] = t;
+	focus(NULL);
+	arrange(selmon);
+}
+
 void
 destroynotify(XEvent *e)
 {
@@ -1265,6 +1288,37 @@ recttomon(int x, int y, int w, int h)
 	return r;
 }
 
+#include <strings.h>
+void
+reorganize(const Arg *arg) {
+	Client *c;
+	unsigned int tagdest[LENGTH(tags)], occ, unocc, i;
+
+	occ = 0;
+	for (c = selmon->clients; c; c = c->next)
+		occ |= (c->tags = (1 << (ffs(c->tags)-1)));
+
+	unocc = 0;
+	for (i = 0; i < LENGTH(tags); ++i) {
+		while (unocc < i && (occ & (1 << unocc)))
+			unocc++;
+		if (occ & (1 << i)) {
+			tagdest[i] = unocc;
+			occ &= ~(1 << i);
+			occ |= 1 << unocc;
+		}
+	}
+
+	for (c = selmon->clients; c; c = c->next)
+		c->tags = 1 << tagdest[ffs(c->tags)-1];
+
+	if (selmon->sel)
+		selmon->tagset[selmon->seltags] = selmon->sel->tags;
+
+	focus(NULL);
+	arrange(selmon);
+}
+
 void
 resize(Client *c, int x, int y, int w, int h, int interact)
 {
@@ -1369,6 +1423,21 @@ restack(Monitor *m)
 	while (XCheckMaskEvent(dpy, EnterWindowMask, &ev));
 }
 
+void
+restart(const Arg *arg)
+{
+	FILE *fp = popen("which dwm", "r");
+	if (fp == NULL) return;
+	char dwm_path[1000] = "";
+	fgets(dwm_path, sizeof(dwm_path), fp);
+	pclose(fp);
+	int len = strlen(dwm_path);
+	if (len == 0) return;
+	if (dwm_path[len-1] == '\n') dwm_path[len-1] = '\0';
+    char *const argv[] = {dwm_path, NULL};
+    execv(argv[0], argv);
+}
+
 void
 run(void)
 {
@@ -1656,7 +1725,10 @@ void
 tag(const Arg *arg)
 {
 	if (selmon->sel && arg->ui & TAGMASK) {
-		selmon->sel->tags = arg->ui & TAGMASK;
+		selmon->sel->tags =
+			(selmon->sel->tags == TAGMASK && (arg->ui & TAGMASK) == TAGMASK)
+			? selmon->tagset[selmon->seltags]
+			: arg->ui & TAGMASK;
 		focus(NULL);
 		arrange(selmon);
 	}
